#!/usr/bin/env python
#encoding=utf8
from __future__ import division
import argparse, time
import numpy as np
import json, sys
from path import path

def main():
    function = 'biom文件的处理'
    parser = argparse.ArgumentParser(description=function)
    subparsers = parser.add_subparsers(title='subcommands',help='sub-command help',
        description='Choose a command to perform the corresponding operation.')

    statParse = subparsers.add_parser('stat', help="statistics Sample's OTU infomation")
    statParse.add_argument('biomfp', help='biom file')
    statParse.set_defaults(func=stat)

    tocsvParse = subparsers.add_parser('tocsv',
                            help='get data of biom to csv')
    tocsvParse.add_argument('biomfp', help='biom file')
    tocsvParse.add_argument('toDir', help='save the matrix of biom as csv to Dir')
    tocsvParse.set_defaults(func=tocsv)


    trimParse = subparsers.add_parser('trim',
                        help="del sample's OTU that read number less than critical")
    trimParse.add_argument('biomfp', help='biom file')
    trimParse.add_argument('critical', help="when less than this critiacal, del the OTU'number",
                        type=int, default=5)
    trimParse.add_argument('toDir', help='save the matrix of biom as csv to Dir')
    trimParse.set_defaults(func=trim)

    if len(sys.argv)==1:
        parser.parse_args(['-h'])
    args = parser.parse_args()
    args.func(args)

def stat(args):
    biom, matrix = biom_matrix(args.biomfp)
    print
    print 'Tatal OTU: ', len(biom['rows'])
    print 'Sample OTU stat:'
    for col in range(biom['shape'][1]):
        count = 0
        for value in matrix[:, col]:
            if value > 0:
                count += 1
        print '%s\t%s' % (biom['columns'][col]['id'], count)
    print

def trim(args):
    biom, matrix = biom_matrix(args.biomfp)
    if not path(args.toDir).exists():
        path(args.toDir).mkdir()
    toFileBiom = '%s/%s_trim_%s.biom' % (args.toDir, path(args.biomfp).namebase, args.critical)
    toFiletsv = '%s/%s_trim_%s.csv' % (args.toDir, path(args.biomfp).namebase,  args.critical)
    biom, matrix = biom_modify(biom, matrix, critical=args.critical)
    biom2file(biom, toFileBiom)
    matrix2csv(biom, matrix, toFiletsv)




def tocsv(args):
    biom, matrix = biom_matrix(args.biomfp)
    if not path(args.toDir).exists():
        path(args.toDir).mkdir()
    toFile = '%s/%s.csv' % (args.toDir, path(args.biomfp).namebase)
    matrix2csv(biom, matrix, toFile)


def biom_matrix(biomfp):
    biom = json.load(open(biomfp))
    matrix = np.zeros(biom['shape'], dtype=int)
    # 把 data 转变 成 matrix 然后 进行操作， 不然会产生很多问题，这个已经验证过了，不用再考虑了。
    for row,col,value in biom['data']:
        # print row, col, 222222
        matrix[row, col] = value
    return biom, matrix

def matrix2csv(biom, matrix, toFile):
    row, col = matrix.shape
    np.zeros((row+1, col+1), dtype=int)
    table = []
    head = ['otu_id']
    for sample in biom['columns']:
        head.append(sample['id'])
    head.append('sum')
    table.append(head)
    for i, row_value in enumerate(matrix):
        line = []
        line.append(biom['rows'][i]['id'])
        line.extend(row_value.tolist())
        line.append(sum(row_value.tolist()))
        line.append(';'.join(biom['rows'][i]['metadata']['taxonomy']))
        # table.append([biom['rows'][i]['id']]+row_value.tolist()+[sum(row_value.tolist())]+[';'.join(biom['rows'][i]['metadata']['taxonomy'])])
        table.append(line)

    from michelia import tsvWriter
    tabfile = tsvWriter(toFile)
    for row in table:
        tabfile.writerow(row)
    tabfile.close()
    print 'CSV save!'


def matrix2data(matrix):
    data = []
    row, col = matrix.shape
    # print matrix.shape, '222222'
    for r in xrange(row):
        for c in xrange(col):
            if matrix[r, c] > 0:
                data.append([r, c, matrix[r, c]])
    return data

def biom_modify(biom, matrix, critical=5):
    row, col = matrix.shape
    # print  matrix.shape
    for r in xrange(row):
        for c in xrange(col):
            if matrix[r, c] <= critical:
                matrix[r, c] = 0
    rowDel = []
    colDel = []
    for r in xrange(row):
        if sum(matrix[r])==0:
            rowDel.append(r)
    rowDel.sort(reverse=True) # 下面用， 从小到大 删除

    for c in xrange(col):
        if sum(matrix[:,c])==0:
            colDel.append(c)
    colDel.sort(reverse=True) # 下面用， 从小到大 删除

    # 删除 修改后biom不必要的 信息
    mList = matrix.tolist()
    for r in rowDel:
        del mList[r]
        del biom['rows'][r]
    # T 的意思是反转 matrix, 这里要删除的是列，所以要先反转再删除
    mList = np.array(mList).T.tolist()
    for c in colDel:
        del mList[c]
        del biom['columns'][c]
    matrix = np.array(mList).T # 再反转过来， 得到正常的并删除了相应行和列 的matrix
    biom['data'] = matrix2data(matrix)
    biom['shape'] = matrix.shape

    # print biom['shape'],'shape'
    # print len(biom['rows']), 'rows'
    # print len(biom['columns']), 'columns'
    return biom, matrix

def biom2file(biom, toFile):
    toFile = open(toFile, 'w')
    json.dump(biom, toFile)
    toFile.close()
    print 'Trim biom save!'

if __name__ == '__main__':
    main()
