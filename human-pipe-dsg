#!/usr/bin/env python
#encoding=utf8

import os, sys, argparse, textwrap
from ruffus import *
import logging
from michelia import path, run_cmd


parser = argparse.ArgumentParser(description='''
            dsg_pipe_human.py "{'L374N': 115, 'L374T': 115}" -j 20 -p
            ''')

parser.add_argument('task', metavar='task', choices=['modify_bam_index', 'miso_summarize', 'merge_summary', 'compare_sample', 'generate_result'], help='选择要执行的任务')
parser.add_argument('insert_size', type=int, help='插入片段长度')
parser.add_argument('sample_id_length', type=str,
                    help="这个是样品的必须信息,  包括样品的id 和 样品测序的长度. 格式如: {'L374N': 115, 'L374T': 115}")

parser.add_argument('-v', '--verbose', dest='verbose',
        action="count", default=3,
        help="Print more detailed messages for each additional verbose level. E.g. run_parallel_blast --verbose --verbose --verbose ... (or -vvv)")

parser.add_argument("-j", "--jobs", dest="jobs",
                    default=4,
                    metavar="jobs",
                    type=int,
                    help="Specifies the number of jobs (operations) to run in parallel.")

parser.add_argument("--flowchart", dest="flowchart",
                    metavar="FILE",
                    type=str,
                    help="Print flowchart of the pipeline to FILE. Flowchart format "
                       "depends on extension. Alternatives include ('.dot', '.jpg', "
                       "'*.svg', '*.png' etc). Formats other than '.dot' require "
                       "the dot program to be installed (http://www.graphviz.org/).")
parser.add_argument("-n", "--just_print", dest="just_print",
                    action="store_true", default=False,
                    help="Only print a trace (description) of the pipeline. "
                         " The level of detail is set by --verbose.")
# parser.add_argument("-p", dest="p",
#                     action="store_true", default=False,
#                     help="print run_cmd")
args = parser.parse_args()

if len(sys.argv)==1:
    parser.parse_args(['-h'])

# def print_cmd(cmd):
#     print cmd

# if args.p:
#     run_cmd = print_cmd

#88888888888888888888888888888888888888888888888888888888888888888888888888888888888888888

#   Logger

logger = logging.getLogger("run_parallel_blast")
#
# We are interesting in all messages
#
if args.verbose:
    logger.setLevel(logging.DEBUG)
    stderrhandler = logging.StreamHandler(sys.stderr)
    stderrhandler.setFormatter(logging.Formatter("    %(message)s"))
    stderrhandler.setLevel(logging.DEBUG)
    logger.addHandler(stderrhandler)


#88888888888888888888888888888888888888888888888888888888888888888888888888888888888888888
#   Pipeline tasks

# samples_length = {'L374N': 115, 'L374T': 115}   #, 'L444N': 104, 'L444T': 104, 'L550N': 104, 'L550T': 104}
samples_length = eval(args.sample_id_length)

if type(samples_length) != dict:
    raise Exception('sample_id_length的格式不对')
# if len(samples_length)<2:
#     raise Exception('样品数量至少是 2个.')

sample_ids = samples_length.keys()  # sample_ids = ['L374N', 'L374T']
# id_all = '%s_%s' % tuple(sample_ids)  # L374N_L374T

anotions = ['SE', 'A3SS', 'A5SS', 'MXE', 'RI']

modify_bam_index_para = []
for sample_id in sample_ids:
    one = []
    one.append('%s_bam/accepted_hits.bam' % sample_id)
    one.append('%s_bam/accepted_hits_modify.bam' % sample_id)
    modify_bam_index_para.append(one)

@files(modify_bam_index_para)
def modify_bam(infile, outfile):
    run_cmd('biomi modifybam %s %s' % (infile, outfile))

@transform(modify_bam, suffix('.bam'), '.bam.bai')
def index_bam(infile, outfile):
    # print '##############################', outfile
    run_cmd('samtools index %s' % infile)

run_events_analysis_para = []
for sample_id in sample_ids:
    for anotion in anotions:
        one = []
        one.append('%s_bam/accepted_hits_modify.bam' % sample_id)
        one.append('%s_miso/complete_flag/flag.%s.%s.compute-genes-psi-complete' % (sample_id, sample_id, anotion))
        one.append(sample_id)
        one.append(anotion)
        run_events_analysis_para.append(one)

@follows(index_bam)
@files(run_events_analysis_para)
def run_events_analysis(infile, outfile, sample_id, anotion):
    run_cmd("run_events_analysis.py --compute-genes-psi /home/sgguo/database/human/h19/misopy/index/%(anotion)s %(bamfile)s --output-dir %(sample_id)s_miso/%(anotion)s --read-len %(length)s -p 5" % {'anotion': anotion, 'sample_id':sample_id, 'bamfile':infile, 'length':samples_length[sample_id]})
    outdir = '%s_miso/complete_flag' % sample_id
    if not path(outdir).exists():
        path(outdir).mkdir()
    open(outfile, 'w')

@transform(run_events_analysis, suffix('.compute-genes-psi-complete'), '.summarize-samples-complete')
def run_miso_summarize_samples(run_miso_summarize_samples_para):
    para = infile.split('.')
    para = {'sample_id': para[-3], 'anotion': para[-2]}
    run_cmd("run_miso.py --summarize-samples %(sample_id)s_miso/%(anotion)s %(sample_id)s_miso/" % para)
    open(outfile, 'w')

@transform(run_miso_summarize_samples, suffix('.summarize-samples-complete'), '.summary_add_type_complete')
def summary_add_type(infile, outfile):
    para = infile.split('.')
    para = {'sample_id': para[-3], 'anotion': para[-2]}
    run_cmd("perl /home/sgguo/script/add_type.pl %(sample_id)s_miso/summary/%(anotion)s.miso_summary %(anotion)s  %(sample_id)s_miso/summary/%(anotion)s.miso_summary_add" % para)
    if name == 'SE':
        run_cmd("head -1 %(sample_id)s_miso/summary/%(anotion)s.miso_summary_add > %(sample_id)s_miso/summary/header.txt" % para)
    run_cmd("sed -i 1d %(sample_id)s_miso/summary/%(anotion)s.miso_summary_add" % anotion_name)
    open(outfile, 'w')

merge_summary_para = []
for sample_id in sample_ids:
    one = []
    one.append('%s_miso/complete_flag/flag.%s.RI.summary_add_type_complete' % (sample_id, sample_id))
    one.append('%(id)s_miso/summary/%(id)s_miso.sumarize_all_events.bf' % {'id':sample_id})
    one.append(sample_id)
    merge_summary_para.append(one)
@follows(summary_add_type)
@files(merge_summary_para)
def merge_summary(infile, outfile, sample_id):
    run_cmd("cat %(id)s_miso/summary/*.miso_summary_add > %(bf)s" % {'id':sample_id, 'bf':outfile})

@follows(run_miso_summarize_samples)
def run_miso_compare_samples(infile, outfile):
    para = {'anotion':name, 'id_one':id1, 'id_two':id2, 'id_all': id_all}
    run_cmd("run_miso.py --compare-samples %(id_one)s_miso/%(anotion)s %(id_two)s_miso/%(anotion)s %(id_all)s_miso_comparisons/%(anotion)s" % para)
    open(outfile, 'w')

@transform(run_miso_compare_samples)
def filter(infile, outfile):
    run_cmd()

exce_task = eval(args.task)

if args.just_print:
    pipeline_printout(sys.stdout, [exce_task], verbose=args.verbose)
elif args.flowchart:
    # use file extension for output format
    output_format = os.path.splitext(args.flowchart)[1][1:]
    pipeline_printout_graph (open(args.flowchart, "w"),
                             output_format,
                             [exce_task],
                             no_key_legend = True)
    os.system('eog %s' % args.flowchart)
else:
    pipeline_run([exce_task],  multiprocess = args.jobs,
                        logger = logger, verbose=args.verbose)

