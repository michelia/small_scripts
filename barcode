#!/usr/bin/env python
#encoding=utf8
from __future__ import division
import argparse, sys, textwrap, pysam
from Bio import SeqIO
from path import path
from michelia import tsvReader
import pdb
b = pdb.set_trace
def main():
    function = 'barcode is a python program in bioinformatics.'
    parser = argparse.ArgumentParser(description=function,)
    subparsers = parser.add_subparsers(title='subcommands',help='sub-command help',
        description='Choose a command to perform the corresponding operation.')

    sample_statParse = subparsers.add_parser('sample_stat', help="statistic the barcode by sample in fasta",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description=textwrap.dedent('''
            covert sequence data format.
                E.g: barcode sample_stat seq.fasta mapping.txt
            '''))
    sample_statParse.add_argument('fasta', help='the fasta file path')
    sample_statParse.add_argument('mapping', help='the mapping file path')
    sample_statParse.set_defaults(func=sample_stat)

    if len(sys.argv)==1:
        parser.parse_args(['-h'])
    args = parser.parse_args()
    args.func(args)


def sample_stat(args):
    sampleList = [] # (sampleID, barcode)
    barcodeCount = {} # {barcode: count}
    for sample in tsvReader(args.mapping, 1):
        sampleList.append((sample[0], sample[1]))
        barcodeCount[sample[1]] = 0
    barLen = len(sample[1])
    for record in SeqIO.parse(args.fasta, 'fasta'):
        barcode = str(record.seq)[:barLen].upper()
        if barcode in barcodeCount:
            barcodeCount[barcode] += 1
    print '#SampleID\tBarcodeSequence\tCount'
    for sample, barcode in sampleList:
        print '%s\t%s\t%s' % (sample, barcode, barcodeCount[barcode])

