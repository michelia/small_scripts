#!/usr/bin/env python
#encoding=utf8
from __future__ import division
import sys,  pdb, argparse, time, datetime
from path import path
b = pdb.set_trace   #调试
from commands import getstatusoutput
from michelia import send_mail, multipros


def main():
    function = ''
    parser = argparse.ArgumentParser(description=function)
    parser.add_argument("sh_script_fp",
                        help="shell脚本文件")
    parser.add_argument("--mail", action='store_true',
                        help="发送邮件")
    parser.add_argument('--multi', action='store_true',
                        help='同时执行一个sh文件的所有命令, 即多进程')
    args = parser.parse_args()
    # print args
    if path(args.sh_script_fp).isfile():
        sc_file_filter(args.sh_script_fp, args.mail, args.multi)
    else:
        cmd_exec(args.sh_script_fp, args.mail)

def sc_file_filter(sh_script_fp, mail=False, multi=False):
    '''
    扩展这个函数实现多进程, 最简单的多进程 不要通信的
    '''
    pros = []
    for line in open(sh_script_fp):
        cmd = line.strip()
        if not cmd:
            continue # 去掉空行
        if cmd.startswith('#'):  # 打印注释
            print cmd
        else:
            if multi:   # 启用 多进程, 同时执行这个sh文件写命令
                pros.append(multipros(cmd_exec, [cmd]))
            else:
                cmd_exec(cmd, mail)
    p_exitcode = []
    if pros:
        for p in pros:
            p.join()
            p_exitcode.append((p.name, p.exitcode))
    print p_exitcode  #打印进程推出的状态q


def cmd_exec(cmd, mail=False):
    status, output = getstatusoutput(cmd)
    print
    print 'CMD:', cmd, '\n     ...'
    print output
    if status is not 0:
        error = '[Error CMD:] %s' % cmd
        print error
        if mail:
            send_mail(sub='cmd error', content=error)
        sys.exit(status)


if __name__ == '__main__':
    startTime = datetime.datetime.now()
    main()
    print
    print '[INFO] Success!    Used time: %s' % (datetime.datetime.now()-startTime)
    print



