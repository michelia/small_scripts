#!/usr/bin/env python
#encoding=utf8

import os, sys, argparse, textwrap
from ruffus import *
import logging
from michelia import path, run_cmd, path


parser = argparse.ArgumentParser(description='''
            mouse-pipe-align "{'L374N': 115, 'L374T': 115}" -j 20 -p
            ''')

# parser.add_argument('task', metavar='task', choices=['plot', 'test', 'deg_cuffdiff', 'cov_plot'], help='选择要执行的任务')
parser.add_argument('insert_size', type=int, help='插入片段长度')
parser.add_argument('sample_id_length', type=str,
                    help='''这个是样品的必须信息,  包括样品的id 和 样品测序的长度. 格式如: "{'L374N': 115, 'L374T': 115}"''')
parser.add_argument('-v', '--verbose', dest='verbose',
        action="count", default=3,
        help="Print more detailed messages for each additional verbose level. E.g. run_parallel_blast --verbose --verbose --verbose ... (or -vvv)")

parser.add_argument("-j", "--jobs", dest="jobs",
                    default=4,
                    metavar="jobs",
                    type=int,
                    help="Specifies the number of jobs (operations) to run in parallel.")

parser.add_argument("--flowchart", dest="flowchart",
                    metavar="FILE",
                    type=str,
                    help="Print flowchart of the pipeline to FILE. Flowchart format "
                       "depends on extension. Alternatives include ('.dot', '.jpg', "
                       "'*.svg', '*.png' etc). Formats other than '.dot' require "
                       "the dot program to be installed (http://www.graphviz.org/).")
parser.add_argument("-n", "--just_print", dest="just_print",
                    action="store_true", default=False,
                    help="Only print a trace (description) of the pipeline. "
                         " The level of detail is set by --verbose.")
parser.add_argument("-p", dest="p",
                    action="store_true", default=False,
                    help="print run_cmd")
args = parser.parse_args()

if len(sys.argv)==1:
    parser.parse_args(['-h'])

def print_cmd(cmd):
    print cmd

if args.p:
    run_cmd = print_cmd

#88888888888888888888888888888888888888888888888888888888888888888888888888888888888888888

#   Logger

logger = logging.getLogger("run_parallel_blast")
#
# We are interesting in all messages
#
if args.verbose:
    logger.setLevel(logging.DEBUG)
    stderrhandler = logging.StreamHandler(sys.stderr)
    stderrhandler.setFormatter(logging.Formatter("    %(message)s"))
    stderrhandler.setLevel(logging.DEBUG)
    logger.addHandler(stderrhandler)


#88888888888888888888888888888888888888888888888888888888888888888888888888888888888888888
#   Pipeline tasks

samples_length = eval(args.sample_id_length)

if type(samples_length) != dict:
    raise Exception('sample_id_length的格式不对')
# if len(samples_length)!=2:
#     raise Exception('样品数量不是2个.')

sample_ids = samples_length.keys()  # sample_ids = ['L374N', 'L374T']
id_all = '_'.join(sample_ids)  # L374N_L374T
anotions = ['SE', 'A3SS', 'A5SS', 'MXE', 'RI']
run_events_analysis_para = []
for sample_id in sample_ids:
    for anotion in anotions:
        one = []
        outdir = '%s_miso/%s' % (sample_id, anotion)
        one.append('%s_dna_align/accepted_hits.bam' % sample_id)
        one.append('%s_miso/complete_flag/flag.%s.%s.eventflagcomplete' % (sample_id, sample_id, anotion))
        one.append(samples_length[sample_id])
        one.append(outdir)
        one.append(anotion)
        one.append(sample_id)
        run_events_analysis_para.append(one)


@files(run_events_analysis_para)
def run_events_analysis(infile, outfile, length, outdir, anotion, sample_id):
    '''infile is the bam file, outfile is a complete flag file'''
    run_cmd("run_events_analysis.py --compute-genes-psi /home/sgguo/database/mouse/mm10-miso-index/%s %s --output-dir %s --read-len %s -p 6" % (anotion, infile, outdir, length))
    outdir = '%s_miso/complete_flag' % sample_id
    if not path(outdir).exists():
        path(outdir).mkdir()
    open(outfile, 'w')

@transform(run_events_analysis, suffix('.eventflagcomplete'), '.summarycomplete',)
def run_miso_summary(infile, outfile):
    '''sample_id and anotion infomation come from infile '''
    para = infile.split('.')
    para = {'sample_id': para[-3], 'anotion': para[-2]}
    run_cmd("run_miso.py --summarize-samples %(sample_id)s_miso/%(anotion)s %(sample_id)s_miso/" % para)
    open(outfile, 'w')

@transform(run_miso_summary, suffix('.summarycomplete'), '.miso_summary_add_complete')
def summary_add_type(infile, outfile):
    para = infile.split('.')
    para = {'sample_id': para[-3], 'anotion': para[-2]}
    run_cmd("perl /home/sgguo/script/add_type.pl %(sample_id)s_miso/summary/%(anotion)s.miso_summary %(anotion)s  %(sample_id)s_miso/summary/%(anotion)s.miso_summary_add" % para)
    if para['anotion']=='SE':
        run_cmd("head -1 %(sample_id)s_miso/summary/%(anotion)s.miso_summary_add > %(sample_id)s_miso/summary/header.txt" % para)
    run_cmd("sed -i 1d %(sample_id)s_miso/summary/%(anotion)s.miso_summary_add" % para)
    open(outfile, 'w')

merge_summay_para = []
for sample_id in sample_ids:
    one = []
    one.append('%(id)s_miso/complete_flag/flag.%(id)s.RI.miso_summary_add_complete' % {'id':sample_id})
    one.append('%(id)s_miso/%(id)s.sumarize_all_events.bf' % {'id':sample_id})
    one.append(sample_id)
    merge_summay_para.append(one)

@follows(summary_add_type)
@files(merge_summay_para)
def merge_summay(infile, outfile, sample_id):
    run_cmd("cat %s_miso/summary/*.miso_summary_add > %s" % (sample_id, outfile))


compare_sample_para = []
for anotion in anotions:
    one = []
    one.append('%(id)s_miso/%(anotion)s/flag.%(id)s.%(anotion)s.summarycomplete' % {'id':sample_ids[0], 'anotion':anotion})
    one.append('%s_miso_comparisons/flag.%s.compare_sample_complete' % (id_all, anotion))
    one.append(anotion)
    one.append(sample_ids[0])
    one.append(sample_ids[1])
    compare_sample_para.append(one)

@follows(run_miso_summary)
@files(compare_sample_para)
def compare_sample(infile, outfile, anotion, id1, id2):
    anotion_name = {'anotion':anotion, 'id_one':id1, 'id_two':id2, 'id_all': id_all}
    run_cmd("run_miso.py --compare-samples %(id_one)s_miso/%(anotion)s %(id_two)s_miso/%(anotion)s %(id_all)s_miso_comparisons/%(anotion)s" % anotion_name)
    open(outfile, 'w')


# exce_task = [eval(args.task), stat_sam]
# exce_task = [merge_summay, compare_sample]
exce_task = [merge_summay]

if args.just_print:
    pipeline_printout(sys.stdout, exce_task, verbose=args.verbose)
elif args.flowchart:
    # use file extension for output format
    output_format = os.path.splitext(args.flowchart)[1][1:]
    pipeline_printout_graph (open(args.flowchart, "w"),
                             output_format,
                             exce_task,
                             no_key_legend = True)
    os.system('eog %s' % args.flowchart)
else:
    pipeline_run(exce_task,  multiprocess = args.jobs,
                        logger = logger, verbose=args.verbose)

