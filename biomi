#!/usr/bin/env python
#encoding=utf8
# from __future__ import division
import argparse , sys, textwrap, datetime

from biomi_lib import fconvert, cutseq, checkQual #, sam2fastq

def main():
    function = 'biomi is a python program in bioinformatics.'
    parser = argparse.ArgumentParser(description=function,)
    subparsers = parser.add_subparsers(title='subcommands',help='sub-command help',
        description='Choose a command to perform the corresponding operation.')

    fconvertParse = subparsers.add_parser('fconvert', help="covert sequence data format",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description=textwrap.dedent('''
            covert sequence data format.
                E.g: biomi fconvert file.sff sff ./ fastq,fasta,qual
            '''))
    fconvertParse.add_argument('fromFile')
    fconvertParse.add_argument('fromFormat')
    fconvertParse.add_argument('toDir')
    fconvertParse.add_argument('toFormat')
    fconvertParse.add_argument('--gz', action='store_true', help='输入输出都是gz压缩后的的文件。')
    fconvertParse.set_defaults(func=fconvert)

    # sam2fastqParse = subparsers.add_parser('sam2fastq', help="covert sam/bam to fastq",
    #     formatter_class=argparse.RawDescriptionHelpFormatter,
    #     description=textwrap.dedent('''
    #         covert sam/bam to fastq
    #             E.g: biomi sam2fastq file.sam ./
    #                  biomi sam2fastq file.bam ./
    #         '''))
    # sam2fastqParse.add_argument('samFile',help='sam or bam file')
    # sam2fastqParse.add_argument('toDir', help='save fastq to the Dir')
    # sam2fastqParse.set_defaults(func=sam2fastq)

    cutseqParse = subparsers.add_parser('cutseq', help="按设定的长度截取seq",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description=textwrap.dedent('''
            按设定的长度截取seq, 并输出为指定的格式文件。
                E.g: biomi cutseq sreq.fasta fasta seq_out.fasta fasta -f 6 -l 180
            '''))
    cutseqParse.add_argument('inputfile',help='the inputfile')
    cutseqParse.add_argument('inputfileformat', help='the format of inputfile')
    cutseqParse.add_argument('outfile', help='the outfile path, 注意是输出文件名')
    cutseqParse.add_argument('out_format', help='the format of outfile')
    cutseqParse.add_argument('-f', type=int, default=1, help='First base to keep. Default is 1 (=first base).')
    cutseqParse.add_argument('-l', type=int, help='Last base to keep. Default is entire read.\
            如当 -l 150 时， 有的序列长度达到150, 则原样输出，只截取 大于150的read 到 150')
    # cutseqParse.add_argument('--gz', action='store_true', help='输入输出都是gz压缩后的的文件。')
    cutseqParse.set_defaults(func=cutseq)

    checkQualParse = subparsers.add_parser('checkQual', help="识别fastq文件的质量值编码(encode offset)",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description=textwrap.dedent('''
            covert sequence data format.
                E.g: biomi checkQual example.fastq / example.fastq.gz
            '''))
    checkQualParse.add_argument('fastq', help='fastq文件或者是gz压缩的fastq文件')
    checkQualParse.set_defaults(func=checkQual)

    if len(sys.argv)==1:
        parser.parse_args(['-h'])
    args = parser.parse_args()
    args.func(args)


if __name__ == '__main__':
    startTime = datetime.datetime.now()
    print
    main()
    print
    print '[INFO] Success!    Used time: %s' % (datetime.datetime.now()-startTime)
    print
